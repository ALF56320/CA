Dans la section précédente, nous avons vu comment chaîner la sortie d'une commande à la suivante. 
Mais que se passe-t-il si vous voulez enchaîner la sortie de deux commandes ou plus à l'autre ?
Que se passe-t-il si vous avez une commande qui prend un fichier comme argument mais que vous souhaitez traiter tout ce qui est envoyé à ce fichier ?

La substitution de processus permet de faire référence à l'entrée ou à la sortie d'un processus à l'aide d'un nom de fichier.
Il a deux formes : output et input .<(cmd)>(cmd)

Exemple:
Output
Imaginez que vous avez deux fichiers dont vous souhaitez comparer le contenu. L'utilisation diff file1 file2pourrait générer des faux positifs 
dans le cas où les lignes ne sont pas ordonnées. Donc, si vous voulez comparer ces fichiers, vous pouvez créer deux nouveaux fichiers, les commander et les comparer.
Cela ressemblerait à :

sort file1 > sorted_file1
sort file2 > sorted_file2
diff sorted_file1 sorted_file2
Avec la substitution de processus, vous pouvez le faire en une seule ligne :
D'accord ! Ce code est utilisé pour trier deux fichiers différents et comparer les résultats triés pour voir s'ils contiennent des différences.

Tout d'abord, la commande "sort" est utilisée pour trier chaque fichier séparément.
"sort" est une commande qui trie les lignes de texte dans un ordre spécifié (par exemple, par ordre alphabétique ou numérique). 
Le résultat trié de chaque fichier est ensuite redirigé (c'est-à-dire envoyé) vers un nouveau fichier. 
Le fichier "sorted_file1" contiendra le résultat trié de "file1", tandis que le fichier "sorted_file2" contiendra le résultat trié de "file2".

Ensuite, la commande "diff" est utilisée pour comparer les deux fichiers triés et trouver des différences.
"diff" est une commande qui compare deux fichiers et affiche les différences ligne par ligne.
Dans ce cas, les fichiers triés sont comparés pour voir s'il y a des différences dans l'ordre des lignes ou si les lignes elles-mêmes sont différentes.

En résumé, ce code trie deux fichiers différents et enregistre les résultats triés dans deux nouveaux fichiers.
Ensuite, il utilise la commande "diff" pour comparer les fichiers triés et afficher les différences entre eux.
Cela peut être utile pour comparer deux versions de fichiers texte ou pour diagnostiquer des erreurs dans des fichiers qui devraient être identiques.

diff <(sort file1) <(sort file2)
Input
Imaginez que vous souhaitiez stocker les journaux d'une application dans un fichier et en même temps l'imprimer sur la console.
Une commande très pratique pour cela est tee.

echo "Hello, world!" | tee /tmp/hello.txt
Supposons maintenant que vous souhaitiez n'avoir que des caractères minuscules dans le fichier tout en conservant la casse normale sur la sortie.
Vous pouvez utiliser la substitution de processus de cette façon :

echo "Hello, world!" | tee >(tr '[:upper:]' '[:lower:]' > /tmp/hello.txt)
Exercer
Il n'y a pas d'exercice pour cette section.
